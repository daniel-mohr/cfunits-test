# A GitHub Action to run the cfunits test suite after events on master.
name: Run test suite

# Triggers the workflow on push or PR events for the master branch (only)
on:
  push:
    branches:
      - master
  pull_request:
    # default (from docs) is just on [opened, synchronize, reopened]
    types: [opened, reopened, ready_for_review, edited]
    branches:
      - master

# Note a workflow can have 1+ jobs that can run sequentially or in parallel.
jobs:
  run-test-suite-job_windows:
    name: run test suite on windows using Miniconda for package management

    # Set-up the build matrix.
    strategy:
      # due to error in cfunits we disable fail-fast to check CI configuration
      fail-fast: false
      matrix:
        # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2016-Readme.md
        # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
        # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
        os: [windows-2019, windows-latest]
        deprecated: [false]
        beta: [false]
        include:
          - os: windows-2016
            deprecated: true
          - os: windows-2022
            beta: true
    continue-on-error: ((${{ matrix.deprecated }}) || (${{ matrix.beta }}))
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    # check environment
    - name: print environment variables (cmd)
      run: |
        echo "RUNNER_OS %RUNNER_OS%"
        echo "RUNNER_NAME %RUNNER_NAME%"
      shell: cmd
    - name: print environment variables (powershell)
      run: |
        echo "RUNNER_OS $env:RUNNER_OS"
        echo "RUNNER_NAME $env:RUNNER_NAME"
      shell: powershell
    - name: skip on windows-2016, windows-2019, windows-2022
      if: (matrix.os != 'windows-2016') && (matrix.os != 'windows-2019') && (matrix.os != 'windows-2022')
      run: echo "run"
    - name: check python version
      run: python -V
    # use conda to install dependencies
    - name: conda init powershell
      run: |
        &($env:CONDA + "\Scripts\conda") init powershell
    - name: install dependencies (via conda and pip from conda)
      run: |
        #conda install --yes --only-deps -c conda-forge cfunits
        conda install -c conda-forge cftime numpy udunits2
        conda install --yes -c conda-forge coverage
        pip install pycodestyle
    - name: set conda environment for cfunits
      run: conda env config vars set UDUNITS2_XML_PATH=$env:CONDA"\Library\share\udunits\udunits2.xml"
    # Ensure shell is configured with conda activated:
    - name: Check conda config
      run: |
        conda info
        conda list
        conda config --show-sources
        conda config --show
    # Install cfunits
    # Important! Must install our development version of cfunits to test:
    # pip install -e .
    - name: install cfunits
      run: pip install -e .
    - name: python -c "import cfunits; print(cfunits.__file__)"
      run: |
        mkdir foo
        cd foo
        python -c "import cfunits; print(cfunits.__file__)"
    # Finally run the test suite and generate a coverage report!
    - name: Run test suite
      # coverage is not available in bash
      # therefore run in powershell (it's windows!)
      run: |
        cd cfunits/test
        coverage erase
        coverage run --source=.. --omit="*/test/*" run_tests.py
    - name: generate a coverage report
      # coverage is not available in bash
      # therefore run in powershell (it's windows!)
      run: |
        cd cfunits/test
        coverage report
